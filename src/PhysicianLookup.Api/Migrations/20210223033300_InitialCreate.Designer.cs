// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using PhysicianLookup.Core.Data;

namespace PhysicianLookup.Api.Migrations
{
    [DbContext(typeof(PhysicianLookupDbContext))]
    [Migration("20210223033300_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PhysicianLookup.Core.Models.Physician", b =>
                {
                    b.Property<Guid>("PhysicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhysicianId");

                    b.ToTable("Physicians");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.TrustRelationship", b =>
                {
                    b.Property<Guid>("TrustRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrusteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrustorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrustRelationshipId");

                    b.HasIndex("TrusteeId");

                    b.HasIndex("TrustorId");

                    b.ToTable("TrustRelationships");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.Physician", b =>
                {
                    b.OwnsOne("PhysicianLookup.Core.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PhysicianId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Province")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhysicianId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("PhysicianId");
                        });
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.TrustRelationship", b =>
                {
                    b.HasOne("PhysicianLookup.Core.Models.User", "Trustee")
                        .WithMany()
                        .HasForeignKey("TrusteeId");

                    b.HasOne("PhysicianLookup.Core.Models.User", "Trustor")
                        .WithMany()
                        .HasForeignKey("TrustorId");
                });

            modelBuilder.Entity("PhysicianLookup.Core.Models.UserRole", b =>
                {
                    b.HasOne("PhysicianLookup.Core.Models.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhysicianLookup.Core.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
